apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'org.jetbrains.dokka'

android {
    compileSdkVersion 28

    defaultConfig {
        multiDexEnabled true
        applicationId "so.codex.hawk"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 4
        versionName "v0.1 (" + versionCode + ")"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    /*flavorDimensions 'hawk'
    productFlavors {
        hawkTest {
            dimension = 'hawk'
            def versionPropsFile = file("../version.properties")
            def code = 1

            if (versionPropsFile.canRead()) {
                def Properties versionProps = new Properties()

                versionProps.load(new FileInputStream(versionPropsFile))

                code = versionProps['VERSION_CODE_DEBUG'].toInteger() + 1

                versionProps['VERSION_CODE_DEBUG'] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)
            }

            versionCode = code
            versionName = "v0.1 (" + code + ")"
        }

        hawk {
            dimension = 'hawk'
            def versionPropsFile = file("../version.properties")
            def code = 1

            if (versionPropsFile.canRead()) {
                def Properties versionProps = new Properties()

                versionProps.load(new FileInputStream(versionPropsFile))

                code = versionProps['VERSION_CODE'].toInteger() + 1

                versionProps['VERSION_CODE'] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)
            }

            versionCode = code
            versionName = "v0.1 (" + code + ")"
        }
    }*/
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":codexbl")
    implementation project(":uicomponent")
    implementation "androidx.multidex:multidex:$multidex_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.2'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    implementation libs.picasso
    implementation libs.coreKtx
}

/*
Set<Project> findDokkaProjects() {
    subprojects.findAll {
        !it.tasks.findAll { "dokka" == it.getName() }.isEmpty()
    }
}

task dokka (type: org.jetbrains.dokka.gradle.DokkaTask, overwrite: true) {
    outputDirectory = docDir
    outputFormat = "gfm"

    dependsOn {
        findDokkaProjects().collect {
            it.tasks.getByName("dokka")
        }
    }

    doFirst {
        def dokkaProjects = findDokkaProjects()

        classpath = dokkaProjects.collect { project -> project.jar.outputs.files.getFiles() }.flatten()
        classpath += files(dokkaProjects.collect { project -> project.sourceSets.main.compileClasspath })

        sourceDirs = files(dokkaProjects.collect { project -> "${project.projectDir}/src/main/kotlin" })
    }
}*/
